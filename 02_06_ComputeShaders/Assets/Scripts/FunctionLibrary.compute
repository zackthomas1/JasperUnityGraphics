// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel WaveKernel
#pragma kernel WaveToMultiWaveKernel 
#pragma kernel WaveToRippleKernel 
#pragma kernel WaveToSphereKernel 
#pragma kernel WaveToTwistingSphereKernel 
#pragma kernel WaveToTwistingTorusKernel 

#pragma kernel MultiWaveToWaveKernel
#pragma kernel MultiWaveKernel
#pragma kernel MultiWaveToRippleKernel 
#pragma kernel MultiWaveToSphereKernel 
#pragma kernel MultiWaveToTwistingSphereKernel 
#pragma kernel MultiWaveToTwistingTorusKernel 

#pragma kernel RippleToWaveKernel
#pragma kernel RippleToMultiWaveKernel
#pragma kernel RippleKernel
#pragma kernel RippleToSphereKernel 
#pragma kernel RippleToTwistingSphereKernel 
#pragma kernel RippleToTwistingTorusKernel 

#pragma kernel SphereToWaveKernel
#pragma kernel SphereToMultiWaveKernel
#pragma kernel SphereToRippleKernel
#pragma kernel SphereKernel
#pragma kernel SphereToTwistingSphereKernel 
#pragma kernel SphereToTwistingTorusKernel

#pragma kernel TwistingSphereToWaveKernel
#pragma kernel TwistingSphereToMultiWaveKernel
#pragma kernel TwistingSphereToRippleKernel
#pragma kernel TwistingSphereToSphereKernel
#pragma kernel TwistingSphereKernel
#pragma kernel TwistingSphereToTwistingTorusKernel 

#pragma kernel TwistingTorusToWaveKernel 
#pragma kernel TwistingTorusToMultiWaveKernel 
#pragma kernel TwistingTorusToRippleKernel 
#pragma kernel TwistingTorusToSphereKernel 
#pragma kernel TwistingTorusToTwistingSphereKernel 
#pragma kernel TwistingTorusKernel

#define PI 3.14159265358979323846

RWStructuredBuffer<float3> _Positions; 

uint _Resolution;

float _Step;
float _Time;
float _TransitionProgress;

float2 GetUV(uint3 id)
{
	return (id.xy + 0.5) * _Step - 1.0;;
}

void SetPosition (uint3 id, float3 position)
{
	if(id.x < _Resolution && id.y < _Resolution)
	{
		_Positions[id.x + (id.y * _Resolution)] = position;
	}
}

float3 Plane (float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = 0.0;
    p.z = v;
    return p;
}

float3 Wave (float u, float v, float t)
{
	float3 p; 
	p.x = u;
	p.y = sin(PI * (u + v + t));
	p.z = v;
	return p;
}

float3 MultiWave(float u, float v, float t)
{
    float3 p;
    float y = sin(PI * (u + (0.5 * t)));
    y += (0.5) * sin(2.0 * PI * (u + t));
    y += sin(PI * (u + v + 0.25 * t));
    y = y * (2.0 / 3.0);
    p.x = u; 
    p.y = y; 
    p.z = v;
    return p;
}
    
float3 Ripple(float u, float v, float t)
{
    float3 p;
    float d = sqrt(u * u + v * v);
    float y = sin(PI * (4.0f * d - t));
    y = y / (1.0f + 10.0f * d);
    p.x = u; 
    p.y = y; 
    p.z = v;
    return p;
}

float3 Sphere(float u, float v, float t)
{
    float3 p;
    float r = cos(0.5 * PI * v);
    p.x = r * sin(PI * (u + t * 0.1));
    p.y = sin(0.5 * PI * v);
    p.z = r * cos(PI * (u + t * 0.1));

    return p;
}

float3 TwistingSphere(float u, float v, float t)
{
    float3 p;
    float r = 0.9 + 0.1 * sin(PI * (12.0 * u + 8.0 * v + t));
    float s = r * cos(0.5 * PI * v);
    p.x = s * sin(PI * u);
    p.y = r * sin(0.5 * PI * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 TwistingTorus(float u, float v, float t)
{
    float3 p;
    float r1 = 0.7 + 0.1 * sin(PI*(8.0 * u + 0.5 * t));
    float r2 = 0.15 + 0.05 * sin(PI * (16.0 * u + 8.0 * v + 3.0 * t));
    float s = r1 + r2 * cos(PI * v);
    p.x = s * sin(PI * u);
    p.y = r2 * sin(PI * v);
    p.z = s * cos(PI * u);
    return p;
}

#define KERNEL_FUNCTION(function)\
[numthreads(8,8,1)]\ 
void function##Kernel (uint3 id : SV_DispatchThreadID)\
{\
	float2 uv = GetUV(id);\
    SetPosition(id, function(uv.x, uv.y, _Time));\
}\ 

KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiWave)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Sphere)
KERNEL_FUNCTION(TwistingSphere)
KERNEL_FUNCTION(TwistingTorus)

#define KERNEL_MORPH_FUNCTION(functionA, functionB)\
[numthreads(8,8,1)]\
void functionA##To##functionB##Kernel (uint3 id : SV_DispatchThreadID)\
{\
    float2 uv = GetUV(id);\ 
    float3 position = lerp(functionA(uv.x, uv.y, _Time), functionB(uv.x, uv.y, _Time), _TransitionProgress);\
    SetPosition(id, position);\
}\

KERNEL_MORPH_FUNCTION(Wave, MultiWave)
KERNEL_MORPH_FUNCTION(Wave, Ripple)
KERNEL_MORPH_FUNCTION(Wave, Sphere)
KERNEL_MORPH_FUNCTION(Wave, TwistingSphere)
KERNEL_MORPH_FUNCTION(Wave, TwistingTorus)
    
KERNEL_MORPH_FUNCTION(MultiWave, Wave)
KERNEL_MORPH_FUNCTION(MultiWave, Ripple)
KERNEL_MORPH_FUNCTION(MultiWave, Sphere)
KERNEL_MORPH_FUNCTION(MultiWave, TwistingSphere)
KERNEL_MORPH_FUNCTION(MultiWave, TwistingTorus)                      
                        
KERNEL_MORPH_FUNCTION(Ripple, Wave)
KERNEL_MORPH_FUNCTION(Ripple, MultiWave)
KERNEL_MORPH_FUNCTION(Ripple, Sphere)
KERNEL_MORPH_FUNCTION(Ripple, TwistingSphere)
KERNEL_MORPH_FUNCTION(Ripple, TwistingTorus)
                            
KERNEL_MORPH_FUNCTION(Sphere, Wave)
KERNEL_MORPH_FUNCTION(Sphere, MultiWave)
KERNEL_MORPH_FUNCTION(Sphere, Ripple)
KERNEL_MORPH_FUNCTION(Sphere, TwistingSphere)
KERNEL_MORPH_FUNCTION(Sphere, TwistingTorus)
                               
KERNEL_MORPH_FUNCTION(TwistingSphere, Wave)
KERNEL_MORPH_FUNCTION(TwistingSphere, MultiWave)
KERNEL_MORPH_FUNCTION(TwistingSphere, Ripple)
KERNEL_MORPH_FUNCTION(TwistingSphere, Sphere)
KERNEL_MORPH_FUNCTION(TwistingSphere, TwistingTorus)                                                                                   
                                                                                    
KERNEL_MORPH_FUNCTION(TwistingTorus, Wave)
KERNEL_MORPH_FUNCTION(TwistingTorus, MultiWave)
KERNEL_MORPH_FUNCTION(TwistingTorus, Ripple)
KERNEL_MORPH_FUNCTION(TwistingTorus, Sphere)
KERNEL_MORPH_FUNCTION(TwistingTorus, TwistingSphere)                                                                                                          